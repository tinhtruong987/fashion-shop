import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { inject } from '@angular/core';
import { of } from 'rxjs';
import { map, catchError, switchMap, withLatestFrom } from 'rxjs/operators';
import { Store } from '@ngrx/store';

import { POSService } from './pos.service';
import { CustomerService } from '../customer/customer.service';
import { AppState } from '../app.state';
import * as POSActions from './pos.actions';
import * as CustomerActions from '../customer/customer.actions';

@Injectable()
export class POSEffects {
  private actions$ = inject(Actions);
  private posService = inject(POSService);
  private customerService = inject(CustomerService);
  private store = inject(Store<AppState>);

  processPayment$ = createEffect(() =>
    this.actions$.pipe(
      ofType(POSActions.processPayment),
      withLatestFrom(
        this.store.select((state) => state.pos.cart),
        this.store.select((state) => state.pos.selectedCustomer),
        this.store.select((state) => state.pos.subtotal),
        this.store.select((state) => state.pos.total),
        this.store.select((state) => state.pos.loyaltyPointsToUse),
        this.store.select((state) => state.pos.discountPercentage)
      ),
      switchMap(
        ([
          action,
          cart,
          customer,
          subtotal,
          total,
          loyaltyPointsUsed,
          discountPercentage,
        ]) => {
          const loyaltyPointsEarned =
            this.posService.calculateLoyaltyPointsEarned(total);
          const discountAmount = (subtotal * discountPercentage) / 100;

          const sale = {
            id: '', // Will be generated by service
            customerId: customer?.id,
            customerName: customer?.name,
            items: cart,
            subtotal,
            discount: discountAmount,
            loyaltyPointsUsed,
            loyaltyPointsEarned,
            total,
            paymentMethods: action.paymentMethods.map((pm) => ({
              ...pm,
              amount: total,
            })),
            cashierId: action.cashierInfo.id,
            cashierName: action.cashierInfo.name,
            saleDate: new Date(),
            status: 'completed' as const,
          };

          return this.posService.processPayment(sale).pipe(
            map((processedSale) => {
              // Update customer loyalty points if customer is selected
              if (customer) {
                const pointsChange = loyaltyPointsEarned - loyaltyPointsUsed;
                this.store.dispatch(
                  CustomerActions.updateLoyaltyPoints({
                    customerId: customer.id,
                    points: pointsChange,
                  })
                );
              }

              return POSActions.processPaymentSuccess({ sale: processedSale });
            }),
            catchError((error) =>
              of(POSActions.processPaymentFailure({ error: error.message }))
            )
          );
        }
      )
    )
  );

  processPaymentSuccess$ = createEffect(() =>
    this.actions$.pipe(
      ofType(POSActions.processPaymentSuccess),
      map(() => POSActions.resetPOSState())
    )
  );
}
